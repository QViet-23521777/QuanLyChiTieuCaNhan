#!/bin/bash

# Account API Test Commands - Ki·ªÉm tra Account CRUD operations
# File test cho Account API v·ªõi interface Account

BASE_URL="http://localhost:3000/api/accounts"
TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6InRQM1owS0Fic1o1aEY2WXl3NExlIiwiZW1haWwiOiJhZG1pbkBleGFtcGxlcy5jb20iLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE3NDkxMTE5NTgsImV4cCI6MTc0OTE5ODM1OH0.P8bNjmAyfOPqbaP_xw0s6zt47avTkJQlZgxnx4pJgyU"
ADMIN_ID="tP3Z0KAbsZ5hF6Yyw4Le"  # ID t·ª´ token - role admin
USER_ID="bkc2IRwmlpAbYQoZi9MJ"   # User ID ƒë·ªÉ test
FAMILY_ID="MeILKsA8ebOjnLr5F3Ye" # Family ID ƒë·ªÉ test
ACCOUNT_ID=""  # S·∫Ω ƒë∆∞·ª£c set sau khi t·∫°o account

echo "üöÄ B·∫Øt ƒë·∫ßu test Account API..."
echo "Token role: admin, Admin ID: $ADMIN_ID"
echo "User ID: $USER_ID, Family ID: $FAMILY_ID"
echo "=================================="

# 1. TEST POST - T·∫°o Account m·ªõi
echo "üìù Test 1: T·∫°o Account m·ªõi..."
RESPONSE=$(curl -s -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "T√†i kho·∫£n ti·ªÅn m·∫∑t",
    "type": "cash",
    "balance": 1000000,
    "initialBalance": 1000000,
    "currency": "VND",
    "userId": "'"$USER_ID"'",
    "familyId": "'"$FAMILY_ID"'",
    "isActive": true
  }' \
  -w "\nHTTP Status: %{http_code}")

echo "$RESPONSE"
# Extract account ID from response if successful
ACCOUNT_ID=$(echo "$RESPONSE" | grep -o '"Id":"[^"]*"' | cut -d'"' -f4 | head -1)
if [ ! -z "$ACCOUNT_ID" ]; then
  echo "‚úÖ Account created with ID: $ACCOUNT_ID"
else
  ACCOUNT_ID="test_account_123"  # Fallback ID for testing
  echo "‚ö†Ô∏è Using fallback Account ID: $ACCOUNT_ID"
fi

echo "=================================="

# 2. TEST GET - L·∫•y Account theo ID
echo "üìã Test 2: L·∫•y th√¥ng tin Account theo ID..."
curl -X GET "$BASE_URL/$ACCOUNT_ID" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 3. TEST GET - L·∫•y Account theo User ID
echo "üë§ Test 3: L·∫•y Account theo User ID..."
curl -X GET "$BASE_URL/user/$USER_ID" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 4. TEST GET - L·∫•y Account theo Family ID
echo "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Test 4: L·∫•y Account theo Family ID..."
curl -X GET "$BASE_URL/family/$FAMILY_ID" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 5. TEST GET - L·∫•y field c·ª• th·ªÉ c·ªßa Account
echo "üîç Test 5a: L·∫•y t√™n Account..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/name" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "üí∞ Test 5b: L·∫•y balance c·ªßa Account..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/balance" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "üè¶ Test 5c: L·∫•y type c·ªßa Account..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/type" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "üí± Test 5d: L·∫•y currency c·ªßa Account..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/currency" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "‚úÖ Test 5e: L·∫•y isActive c·ªßa Account..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/isActive" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "üë§ Test 5f: L·∫•y userId c·ªßa Account..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/userId" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Test 5g: L·∫•y familyId c·ªßa Account..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/familyId" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "üí∞ Test 5h: L·∫•y initialBalance c·ªßa Account..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/initialBalance" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 6. TEST PUT - C·∫≠p nh·∫≠t Account
echo "‚úèÔ∏è Test 6: C·∫≠p nh·∫≠t th√¥ng tin Account..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "T√†i kho·∫£n ti·ªÅn m·∫∑t - Updated",
    "type": "bank",
    "currency": "USD"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 7. TEST PUT - C·∫≠p nh·∫≠t s·ªë d∆∞ Account
echo "üí∞ Test 7a: C·∫≠p nh·∫≠t s·ªë d∆∞ - Th√™m ti·ªÅn..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/balance" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 500000,
    "operation": "add"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "üí∞ Test 7b: C·∫≠p nh·∫≠t s·ªë d∆∞ - Tr·ª´ ti·ªÅn..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/balance" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 200000,
    "operation": "subtract"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "üí∞ Test 7c: C·∫≠p nh·∫≠t s·ªë d∆∞ - Set s·ªë d∆∞ m·ªõi..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/balance" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 2000000,
    "operation": "set"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 8. TEST PUT - V√¥ hi·ªáu h√≥a Account
echo "‚è∏Ô∏è Test 8: V√¥ hi·ªáu h√≥a Account..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/deactivate" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 9. TEST PUT - K√≠ch ho·∫°t l·∫°i Account
echo "‚ñ∂Ô∏è Test 9: K√≠ch ho·∫°t l·∫°i Account..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/activate" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 10. TEST VALIDATION - Ki·ªÉm tra validation
echo "‚ö†Ô∏è Test 10: Ki·ªÉm tra validation..."

echo "Test 10a: Thi·∫øu t√™n Account..."
curl -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "type": "cash",
    "balance": 100000,
    "userId": "'"$USER_ID"'"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 10b: Thi·∫øu type Account..."
curl -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "Test Account",
    "balance": 100000,
    "userId": "'"$USER_ID"'"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 10c: Type kh√¥ng h·ª£p l·ªá..."
curl -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "Test Account",
    "type": "invalid_type",
    "balance": 100000,
    "userId": "'"$USER_ID"'"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 10d: Thi·∫øu userId v√† familyId..."
curl -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "Test Account",
    "type": "cash",
    "balance": 100000
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 10e: Operation kh√¥ng h·ª£p l·ªá cho balance..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/balance" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 100000,
    "operation": "invalid_operation"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 10f: Thi·∫øu amount cho balance update..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/balance" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "operation": "add"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 11. TEST BALANCE VALIDATION
echo "üí∞ Test 11: Ki·ªÉm tra validation s·ªë d∆∞..."

echo "Test 11a: S·ªë d∆∞ √¢m cho t√†i kho·∫£n cash (s·∫Ω fail)..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/balance" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": -1000000,
    "operation": "set"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

# T·∫°o credit account ƒë·ªÉ test s·ªë d∆∞ √¢m
echo "Test 11b: T·∫°o credit account ƒë·ªÉ test s·ªë d∆∞ √¢m..."
CREDIT_RESPONSE=$(curl -s -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "Th·∫ª t√≠n d·ª•ng",
    "type": "credit",
    "balance": 0,
    "initialBalance": 0,
    "currency": "VND",
    "userId": "'"$USER_ID"'",
    "isActive": true
  }' \
  -w "\nHTTP Status: %{http_code}")

echo "$CREDIT_RESPONSE"

CREDIT_ACCOUNT_ID=$(echo "$CREDIT_RESPONSE" | grep -o '"Id":"[^"]*"' | cut -d'"' -f4 | head -1)
if [ ! -z "$CREDIT_ACCOUNT_ID" ]; then
  echo "‚úÖ Credit account created with ID: $CREDIT_ACCOUNT_ID"
  
  echo "Test 11c: S·ªë d∆∞ √¢m cho credit account (s·∫Ω th√†nh c√¥ng)..."
  curl -X PUT "$BASE_URL/$CREDIT_ACCOUNT_ID/balance" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $TOKEN" \
    -d '{
      "amount": -500000,
      "operation": "set"
    }' \
    -w "\nHTTP Status: %{http_code}\n\n"
fi

echo "=================================="

# 12. TEST AUTHORIZATION - Ki·ªÉm tra quy·ªÅn truy c·∫≠p
echo "üîí Test 12: Ki·ªÉm tra quy·ªÅn truy c·∫≠p..."

echo "Test 12a: Truy c·∫≠p kh√¥ng c√≥ token..."
curl -X GET "$BASE_URL/$ACCOUNT_ID" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 12b: Truy c·∫≠p v·ªõi token kh√¥ng h·ª£p l·ªá..."
curl -X GET "$BASE_URL/$ACCOUNT_ID" \
  -H "Authorization: Bearer invalid_token" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 13. TEST FIELD VALIDATION - Ki·ªÉm tra field kh√¥ng h·ª£p l·ªá
echo "üîç Test 13: Ki·ªÉm tra field kh√¥ng h·ª£p l·ªá..."
curl -X GET "$BASE_URL/$ACCOUNT_ID/field/invalid_field" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 14. TEST EDGE CASES
echo "üß™ Test 14: Edge cases..."

echo "Test 14a: Account ID kh√¥ng t·ªìn t·∫°i..."
curl -X GET "$BASE_URL/non_existent_account_id" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 14b: User ID kh√¥ng t·ªìn t·∫°i..."
curl -X GET "$BASE_URL/user/non_existent_user_id" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 14c: Family ID kh√¥ng t·ªìn t·∫°i..."
curl -X GET "$BASE_URL/family/non_existent_family_id" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 14d: C·∫≠p nh·∫≠t account kh√¥ng t·ªìn t·∫°i..."
curl -X PUT "$BASE_URL/non_existent_account_id" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "Updated Name"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 14e: V√¥ hi·ªáu h√≥a account ƒë√£ v√¥ hi·ªáu h√≥a..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/deactivate" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

curl -X PUT "$BASE_URL/$ACCOUNT_ID/deactivate" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 14f: K√≠ch ho·∫°t account ƒë√£ k√≠ch ho·∫°t..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/activate" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

curl -X PUT "$BASE_URL/$ACCOUNT_ID/activate" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 15. TEST DELETE SCENARIOS
echo "üóëÔ∏è Test 15: Ki·ªÉm tra x√≥a account..."

echo "Test 15a: X√≥a account c√≥ s·ªë d∆∞ (s·∫Ω fail)..."
curl -X DELETE "$BASE_URL/$ACCOUNT_ID" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 15b: Set s·ªë d∆∞ v·ªÅ 0 v√† x√≥a account..."
curl -X PUT "$BASE_URL/$ACCOUNT_ID/balance" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "amount": 0,
    "operation": "set"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "X√≥a account sau khi set s·ªë d∆∞ v·ªÅ 0..."
curl -X DELETE "$BASE_URL/$ACCOUNT_ID" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 15c: X√≥a account kh√¥ng t·ªìn t·∫°i..."
curl -X DELETE "$BASE_URL/non_existent_account_id" \
  -H "Authorization: Bearer $TOKEN" \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="

# 16. TEST MULTIPLE ACCOUNT TYPES
echo "üè¶ Test 16: T·∫°o nhi·ªÅu lo·∫°i t√†i kho·∫£n..."

echo "Test 16a: T·∫°o bank account..."
curl -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "T√†i kho·∫£n ng√¢n h√†ng",
    "type": "bank",
    "balance": 5000000,
    "initialBalance": 5000000,
    "currency": "VND",
    "userId": "'"$USER_ID"'"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 16b: T·∫°o saving account..."
curl -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "T√†i kho·∫£n ti·∫øt ki·ªám",
    "type": "saving",
    "balance": 10000000,
    "initialBalance": 10000000,
    "currency": "VND",
    "familyId": "'"$FAMILY_ID"'"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "----------------------------------"

echo "Test 16c: T·∫°o others account..."
curl -X POST $BASE_URL \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "name": "V√≠ ƒëi·ªán t·ª≠",
    "type": "others",
    "balance": 1000000,
    "initialBalance": 1000000,
    "currency": "VND",
    "userId": "'"$USER_ID"'"
  }' \
  -w "\nHTTP Status: %{http_code}\n\n"

echo "=================================="
echo "‚úÖ Ho√†n th√†nh t·∫•t c·∫£ test cases cho Account API!"
echo ""
echo "üìä Gi·∫£i th√≠ch k·∫øt qu·∫£ d·ª± ki·∫øn:"
echo "  ‚úÖ 200: Th√†nh c√¥ng (GET account, GET fields, PUT account, PUT balance, PUT activate/deactivate)"
echo "  ‚úÖ 201: T·∫°o th√†nh c√¥ng (POST account)"
echo "  ‚ùå 400: Validation error (invalid data, missing fields, negative balance for non-credit)"
echo "  ‚ùå 401: Unauthorized (no token, invalid token)"
echo "  ‚ùå 404: Not found (invalid field, non-existent account/user/family)"
echo "  ‚ùå 500: Server error"
echo ""
echo "üîç L∆∞u √Ω v·ªÅ Account API:"
echo "  - Account types: cash, bank, credit, saving, others"
echo "  - Balance operations: add, subtract, set"
echo "  - Credit accounts c√≥ th·ªÉ c√≥ s·ªë d∆∞ √¢m"
echo "  - Kh√¥ng th·ªÉ x√≥a account c√≥ s·ªë d∆∞ kh√°c 0"
echo "  - Account ph·∫£i thu·ªôc v·ªÅ userId ho·∫∑c familyId"
echo ""
echo "üí≥ Interface Account fields:"
echo "  - Id: string (auto-generated)"
echo "  - name: string (required)"
echo "  - type: 'cash' | 'bank' | 'credit' | 'saving' | 'others' (required)"
echo "  - balance: number (default: 0)"
echo "  - initialBalance: number"
echo "  - currency: string (default: 'VND')"
echo "  - userId: string (required if no familyId)"
echo "  - familyId: string (required if no userId)"
echo "  - isActive: boolean (default: true)"
echo "  - createdAt: Timestamp | Date (auto-generated)"
echo "  - updatedAt: Timestamp | Date (auto-generated)"
echo ""
echo "üìã Test order ƒë∆∞·ª£c s·∫Øp x·∫øp theo:"
echo "  1. Basic CRUD operations"
echo "  2. Field-specific operations"
echo "  3. Balance management"
echo "  4. Account activation/deactivation"
echo "  5. Validation tests"
echo "  6. Authorization tests"
echo "  7. Edge cases v√† delete scenarios"
echo "  8. Multiple account types"